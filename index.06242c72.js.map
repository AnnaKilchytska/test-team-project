{"mappings":"AAAA,MAIMA,EAAWC,SAASC,cAAc,qBAExCC,eAAeC,IACb,IACE,MAAMC,QAAaC,MAAM,4FACnBC,QAAmBF,EAAKG,QACxBC,QAAEA,GAAYF,EACpB,OAAOE,C,CACP,MAAOC,GACPC,QAAQC,IAAIF,E,EA4ChBP,eAAeU,EAAaR,GAC1BM,QAAQG,IAAI,eAAgBT,GAG5B,MAAMU,QA7BRZ,iBACE,MAAME,QAAaC,MACjB,0FAGIU,QAAmBX,EAAKG,QACxBS,OAAEA,GAAWD,EACnBL,QAAQG,IAAIG,GAIZ,MAAMF,EAAa,GAQnB,OANAE,EAAOC,KAAIC,IACTJ,EAAWI,EAAKC,IAAMD,EAAKE,IAAI,IAGjCV,QAAQG,IAAI,aAAcC,GAEnBA,C,CAUkBO,GACzBX,QAAQG,IAAI,uBAAwBC,GAEpC,MAAMQ,EAAe,sCACrBZ,QAAQG,IAAIS,GA6BZ,OA3BelB,EACZa,KAAIC,IACH,IAAIF,EAAS,GACb,MAAMO,EA2BZ,SAA4BC,EAAYC,GACtC,MAEMC,EAFaF,EAAWG,UAEQV,KAAIC,GACjCO,EAAWP,KAIpB,OADAR,QAAQG,IAAI,iBAAkBa,GACvBA,C,CAnCyBE,CAAmBV,EAAMJ,GAUrD,OAREE,EADEO,EAAoBM,SAAS,mBACtB,GAAGN,EAAoB,YACvBA,EAAoBO,OAAS,EAC7B,GAAGP,EAAoB,OAAOA,EAAoB,YAElDA,EAGXb,QAAQG,IAAI,OAAQK,GACb,uBACGI,IAAeJ,EAAKa,+CACLb,EAAKc,oJAGMd,EAAKc,qDACPhB,aAAkBE,EAAKe,aAAaC,MACpE,EACA,sCAGE,IAELC,KAAK,G,CAvCVhC,IArCAD,iBACE,MAAME,QAAaC,MACjB,uFAEIC,QAAmBF,EAAKG,QACxB6B,OAAEA,GAAW9B,EACnBI,QAAQG,IAAIuB,GAEZ,MAAMd,EAAe,GAAGc,EAAOC,kBAC7BD,EAAOE,cAAcF,EAAOG,aAAaT,OAAS,KAEpDpB,QAAQG,IAAIS,E,CA2BdkB,GAqDAtC,iBACE,IACE,MAAMuC,QAActC,IACpBO,QAAQG,IAAI4B,GACZ,MAAMC,QAAe9B,EAAa6B,GAClC/B,QAAQG,IAAI4B,GACZ/B,QAAQG,IAAI4B,EAAMd,WAGlB5B,EAAS4C,UAAYD,C,CACrB,MAAOjC,GACPC,QAAQC,IAAIF,E,EAIhBmC","sources":["src/index.js"],"sourcesContent":["const API_KEY = '5e62b2453973c629f1496ace3a4b7719';\n// const API_KEY = '60bdd84997c9f2a4c6cd2341c547ed98';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\nconst cardList = document.querySelector('.trending-gallery');\n\nasync function fetchPopularFilms() {\n  try {\n    const data = await fetch(`${BASE_URL}?api_key=${API_KEY}`);\n    const parcedData = await data.json();\n    const { results } = parcedData;\n    return results;\n  } catch (error) {\n    console.dir(error);\n  }\n}\n\nasync function getImages() {\n  const data = await fetch(\n    `https://api.themoviedb.org/3/configuration?api_key=${API_KEY}`\n  );\n  const parcedData = await data.json();\n  const { images } = parcedData;\n  console.log(images);\n\n  const imageBaseURL = `${images.secure_base_url}${\n    images.profile_sizes[images.poster_sizes.length - 1]\n  }`;\n  console.log(imageBaseURL);\n  return imageBaseURL;\n}\n\nasync function getGenres() {\n  const data = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  // отримуємо назви жанрів\n  const genresData = await data.json();\n  const { genres } = genresData;\n  console.log(genres);\n\n  // масив об'єктів з властивістю id i значенням name\n\n  const genreNames = {};\n\n  genres.map(item => {\n    genreNames[item.id] = item.name;\n  });\n\n  console.log('genreNames', genreNames);\n\n  return genreNames;\n}\n\nfetchPopularFilms();\ngetImages();\n\nasync function createMarkup(data) {\n  console.log('data results', data);\n  //   const imageBaseURL = await getImages();\n\n  const genreNames = await getGenres();\n  console.log('genreNames in markup', genreNames);\n\n  const imageBaseURL = 'https://image.tmdb.org/t/p/original';\n  console.log(imageBaseURL);\n\n  const markup = data\n    .map(item => {\n      let genres = '';\n      const genresNamesToRender = getGenreDeciphered(item, genreNames);\n      if (genresNamesToRender.includes('Science Fiction')) {\n        genres = `${genresNamesToRender[0]}, Other`;\n      } else if (genresNamesToRender.length > 2) {\n        genres = `${genresNamesToRender[0]}, ${genresNamesToRender[1]}, Other`;\n      } else {\n        genres = genresNamesToRender;\n      }\n\n      console.log('item', item);\n      return `<li>\n    <img src=\"${imageBaseURL}${item.poster_path}\" \n          alt=\"The poster of ${item.title} film\" \n          class=\"trending-gallery__image\" />\n    <div class=\"trending-gallery__wrapper\">\n    <h3 class=\"trending-gallery__title\">${item.title}</h3>\n    <p class=\"trending-gallery__info\">${genres} | <span>${item.release_date.slice(\n        0,\n        4\n      )}</span></p>\n    </div>\n    </li>`;\n    })\n    .join('');\n  return markup;\n}\n\nfunction getGenreDeciphered(filmObject, genresList) {\n  const genreArray = filmObject.genre_ids;\n\n  const genreNamesToRender = genreArray.map(item => {\n    return genresList[item];\n  });\n\n  console.log('genresToRender', genreNamesToRender);\n  return genreNamesToRender;\n}\n\nasync function renderPopularFilms() {\n  try {\n    const films = await fetchPopularFilms();\n    console.log(films);\n    const markup = await createMarkup(films);\n    console.log(films);\n    console.log(films.genre_ids);\n    // console.log(markup);\n\n    cardList.innerHTML = markup;\n  } catch (error) {\n    console.dir(error);\n  }\n}\n\nrenderPopularFilms();\n"],"names":["$1f0dc3b9307be026$var$cardList","document","querySelector","async","$1f0dc3b9307be026$var$fetchPopularFilms","data","fetch","parcedData","json","results","error","console","dir","$1f0dc3b9307be026$var$createMarkup","log","genreNames","genresData","genres","map","item","id","name","$1f0dc3b9307be026$var$getGenres","imageBaseURL","genresNamesToRender","filmObject","genresList","genreNamesToRender","genre_ids","$1f0dc3b9307be026$var$getGenreDeciphered","includes","length","poster_path","title","release_date","slice","join","images","secure_base_url","profile_sizes","poster_sizes","$1f0dc3b9307be026$var$getImages","films","markup","innerHTML","$1f0dc3b9307be026$var$renderPopularFilms"],"version":3,"file":"index.06242c72.js.map"}